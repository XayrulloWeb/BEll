import express, { Request, Response } from 'express';
import cors from 'cors';
import cron from 'node-cron';
import { dbService } from './database.service';
import { authenticateToken, AuthenticatedRequest, requireRole, requireSchoolAccess } from './auth.middleware';
import { generateToken, hashPassword, comparePassword, generateUserId } from './auth.utils';

const app = express();
const PORT = 4000;

app.use(cors());
app.use(express.json());
dbService.initialize();

// --- –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø API ENDPOINTS ---
app.post('/api/auth/register', async (req: Request, res: Response) => {
    try {
        const { username, password, schoolId, role = 'admin' } = req.body;

        if (!username || !password || !schoolId) {
            return res.status(400).json({ message: '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUser = dbService.getUserByUsername(username);
        if (existingUser) {
            return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —à–∫–æ–ª–∞
        const schoolData = dbService.getDataForSchool(schoolId);
        if (!schoolData) {
            return res.status(404).json({ message: '–®–∫–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const bcrypt = require('bcrypt');
        const passwordHash = bcrypt.hashSync(password, 10);
        const userId = generateUserId();

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = dbService.createUser({
            id: userId,
            username,
            passwordHash,
            schoolId,
            role
        });

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        const token = generateToken({
            userId: newUser.id,
            username: newUser.username,
            schoolId: newUser.schoolId,
            role: newUser.role
        });

        res.status(201).json({
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            token,
            user: {
                id: newUser.id,
                username: newUser.username,
                schoolId: newUser.schoolId,
                role: newUser.role
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/auth/login', async (req: Request, res: Response) => {
    try {
        const { username, password } = req.body;

        if (!username || !password) {
            return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = dbService.getUserByUsername(username);
        if (!user) {
            return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const bcrypt = require('bcrypt');
        const isValidPassword = bcrypt.compareSync(password, user.passwordHash);
        if (!isValidPassword) {
            return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        const token = generateToken({
            userId: user.id,
            username: user.username,
            schoolId: user.schoolId,
            role: user.role
        });

        res.status(200).json({
            message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
            token,
            user: {
                id: user.id,
                username: user.username,
                schoolId: user.schoolId,
                role: user.role
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// --- –ó–ê–©–ò–©–ï–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´ (API ENDPOINTS) ---
app.get('/api/data', authenticateToken, (req: Request, res: Response) => {
    try {
        const schoolId = (req as any).user!.schoolId;
        const data = dbService.getDataForSchool(schoolId);
        if (!data) return res.status(404).json({ message: '–®–∫–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        res.status(200).json(data);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});
app.post('/api/schedules', authenticateToken, (req: Request, res: Response) => {
    try {
        const { id, name } = req.body;
        if (!id || !name) return res.status(400).json({ message: '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        const newSchedule = dbService.addSchedule({ id, name, schoolId: (req as any).user!.schoolId });
        res.status(201).json(newSchedule);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.delete('/api/schedules/:id', authenticateToken, (req: AuthenticatedRequest, res: Response) => {
    try {
        const { id } = req.params;
        if (!id) return res.status(400).json({ message: 'ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        const ok = dbService.deleteSchedule(id);
        if (!ok) return res.status(404).json({ message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        return res.status(200).json({ message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/settings/activeSchedule', authenticateToken, (req: Request, res: Response) => {
    try {
        const { id: scheduleId } = req.body;
        if (!scheduleId) return res.status(400).json({ message: 'ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        const success = dbService.setActiveSchedule((req as any).user!.schoolId, scheduleId);
        if (!success) return res.status(404).json({ message: '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è' });
        res.status(200).json({ message: `–ê–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${scheduleId}` });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.post('/api/bells', authenticateToken, (req: AuthenticatedRequest, res: Response) => {
    try {
        const newBellData: any = req.body;
        if (!newBellData.id || !newBellData.scheduleId) return res.status(400).json({ message: '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        const createdBell = dbService.addBellToSchedule(newBellData);
        res.status(201).json(createdBell);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.put('/api/bells/:id', authenticateToken, (req: AuthenticatedRequest, res: Response) => {
    try {
        const { id } = req.params;
        const updatedData = req.body;
        const updatedBell = dbService.updateBell(id, updatedData);
        if (!updatedBell) return res.status(404).json({ message: '–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        res.status(200).json(updatedBell);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.delete('/api/bells/:id', authenticateToken, (req: AuthenticatedRequest, res: Response) => {
    try {
        const { id } = req.params;
        const success = dbService.deleteBell(id);
        if (!success) return res.status(404).json({ message: '–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        res.status(200).json({ message: '–ó–≤–æ–Ω–æ–∫ —É–¥–∞–ª–µ–Ω' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// --- LESSON SLOTS API (—É–¥–∞–ª–µ–Ω–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é) ---

// --- ‚è∞ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ‚è∞ ---

// –ü–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏, —Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –≤ JavaScript's `new Date().getDay()` (–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=0)
const DAYS_OF_WEEK_JS_ORDER = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

const checkBells = () => {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å
    const now = new Date();
    // 'en-GB' –¥–∞–µ—Ç –Ω–∞–º —Ñ–æ—Ä–º–∞—Ç HH:mm –±–µ–∑ AM/PM
    const currentTime = now.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });
    const currentDay = DAYS_OF_WEEK_JS_ORDER[now.getDay()];

    console.log(`[Scheduler Tick] ${currentTime} (${currentDay})`);

    try {
        // 2. –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é –º–æ—â–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ dbService
        const bellsToRing = dbService.getRingingBellsForCurrentTime(currentTime, currentDay);

        // 3. –ï—Å–ª–∏ –µ—Å—Ç—å –∑–≤–æ–Ω–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
        if (bellsToRing.length > 0) {
            console.log(`üîîüîîüîî –ù–ê–ô–î–ï–ù–û ${bellsToRing.length} –ó–í–û–ù–ö–û–í! üîîüîîüîî`);
            for (const bellInfo of bellsToRing) {
                // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∑–≤—É–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —à–∫–æ–ª—ã `schoolId`
                console.log(`  -> –®–∫–æ–ª–∞: "${bellInfo.schoolName}" (${bellInfo.schoolId})`);
                console.log(`     –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: "${bellInfo.scheduleName}"`);
                console.log(`     –ó–≤–æ–Ω–æ–∫: "${bellInfo.bellName}"`);
                console.log('----------------------------------------------------');
            }
        }
    } catch (error) {
        console.error('[Scheduler CRITICAL] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–≤–æ–Ω–∫–æ–≤:', error);
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
cron.schedule('* * * * *', checkBells);

console.log('‚è∞ –ú—É–ª—å—Ç–∏-—à–∫–æ–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω.');

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
app.listen(PORT, () => {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});