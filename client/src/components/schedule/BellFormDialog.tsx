// Файл: src/components/schedule/BellFormDialog.tsx (ПОЛНАЯ ЗАМЕНА)

import { useEffect, useState } from 'react';
import { Bell, BellData } from '../../store/useStore';
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import useStore from '../../store/useStore.ts'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Loader2 } from 'lucide-react';
const DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
const initialBellFormData: BellData = { time: '', day: 'Monday', name: '', enabled: true, soundId: 'sound-1', bellType: 'lesson', breakDuration: 10 };

// Определяем пропсы компонента
interface BellFormDialogProps {
    isOpen: boolean;
    onOpenChange: (open: boolean) => void;
    onSubmit: (data: BellData) => void;
    editingBell: Bell | null;
    initialDataForCreate?: BellData | null; // <-- Наш новый пропс
}

export const BellFormDialog = ({ isOpen, onOpenChange, onSubmit, editingBell, initialDataForCreate }: BellFormDialogProps) => {
    // Внутреннее состояние формы
    const [formData, setFormData] = useState<BellData>(initialBellFormData);
    const isSubmitting = useStore(state => state.isSubmitting);    // Этот хук будет синхронизировать состояние формы с пропсами при открытии диалога
    useEffect(() => {
        if (isOpen) {
            if (editingBell) {
                // Если это РЕДАКТИРОВАНИЕ, берем данные из `editingBell`
                const { id, scheduleId, autoGenerated, groupId, ...data } = editingBell;
                setFormData(data);
            } else {
                // Если это СОЗДАНИЕ, берем данные из `initialDataForCreate` (наши "умные" данные)
                // или из данных по умолчанию, если ничего не передано.
                setFormData(initialDataForCreate || initialBellFormData);
            }
        }
    }, [isOpen, editingBell, initialDataForCreate]);

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        onSubmit(formData);
    };

    return (
        <Dialog open={isOpen} onOpenChange={onOpenChange}>
            <DialogContent>
                <DialogHeader>
                    <DialogTitle>{editingBell ? 'Редактировать звонок' : 'Новый звонок'}</DialogTitle>
                    <DialogDescription>
                        {editingBell ? 'Внесите изменения в данные звонка.' : `Создание нового звонка для дня: ${formData.day}`}
                    </DialogDescription>
                </DialogHeader>
                <form onSubmit={handleSubmit} className="space-y-4 pt-4">
                    <div className="space-y-2">
                        <Label htmlFor="name">Название</Label>
                        <Input id="name" value={formData.name} onChange={e => setFormData({ ...formData, name: e.target.value })} placeholder="Начало урока" required />
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                            <Label htmlFor="time">Время</Label>
                            <Input id="time" type="time" value={formData.time} onChange={e => setFormData({ ...formData, time: e.target.value })} required />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="day">День</Label>
                            <Select value={formData.day} onValueChange={day => setFormData({ ...formData, day: day as any })}>
                                <SelectTrigger><SelectValue /></SelectTrigger>
                                <SelectContent>{DAYS.map(d => <SelectItem key={d} value={d}>{d}</SelectItem>)}</SelectContent>
                            </Select>
                        </div>
                    </div>
                    <div className="flex items-center space-x-2 pt-2">
                        <Switch id="enabled" checked={formData.enabled} onCheckedChange={c => setFormData({ ...formData, enabled: c })} />
                        <Label htmlFor="enabled">Включить звонок</Label>
                    </div>
                    <DialogFooter>
                        <Button type="submit" disabled={isSubmitting}>
                            {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                            {isSubmitting ? 'Сохранение...' : 'Сохранить'}
                        </Button>
                    </DialogFooter>
                </form>
            </DialogContent>
        </Dialog>
    );
};