// –§–∞–π–ª: src/socket.ts (–ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê)

import { io, Socket } from 'socket.io-client';
import { useAuthStore } from './store/useAuthStore';
import useStore from './store/useStore'; // <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π —Å—Ç–æ—Ä
import { toast } from 'sonner';

const URL = 'http://localhost:4000';

let socket: Socket;

export const initiateSocketConnection = () => {
  const token = useAuthStore.getState().token;
  if (!token) return;
  
  socket = io(URL, { auth: { token } });

  socket.on('connect', () => console.log('[Socket.IO] ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É.'));
  socket.on('disconnect', () => console.log('[Socket.IO] ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.'));
  socket.on('connect_error', (err) => {
    console.error(`[Socket.IO] üõë –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${err.message}`);
    toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ real-time —Å–µ—Ä–≤–µ—Ä—É.");
  });
  
  // --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---
  
  socket.on('ring-the-bell', (data: { bellName: string, bellTime: string }) => {
    console.log('[Socket.IO] üîî –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∑–≤–æ–Ω–∫–∞:', data);
    toast.info(`–ü—Ä–æ–∑–≤–µ–Ω–µ–ª –∑–≤–æ–Ω–æ–∫: ${data.bellName}`, { description: `–í—Ä–µ–º—è: ${data.bellTime}` });
    useStore.getState().addLogEntry(`–ü—Ä–æ–∑–≤–µ–Ω–µ–ª –∑–≤–æ–Ω–æ–∫: ${data.bellName}`);
  });
  
  socket.on('play-alert', (data: { alertType: string }) => {
    console.log(`[Socket.IO] üî• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Ç—Ä–µ–≤–æ–≥–∏: ${data.alertType}`);
    useStore.getState().activateAlert(); // <-- –í—ã–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å—Ç–æ—Ä–µ
  });

  socket.on('stop-alert', () => {
    console.log(`[Socket.IO] üõë –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–µ–≤–æ–≥–∏.`);
    useStore.getState().deactivateAlert(); // <-- –í—ã–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å—Ç–æ—Ä–µ
    toast.success("–¢—Ä–µ–≤–æ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
  });
};

export const disconnectSocket = () => {
  if (socket) socket.disconnect();
};

// --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –°–û–ë–´–¢–ò–ô ---
export const sendEmergencyAlert = (alertType: string) => {
    if (socket) socket.emit('emergency-alert', { alertType });
}

export const sendStopAlert = () => {
    if (socket) socket.emit('force-stop-all');
}