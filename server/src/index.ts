// –§–∞–π–ª: src/index.ts (–ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê)

import express from 'express';
import cors from 'cors';
import cron from 'node-cron';
import dotenv from 'dotenv';
import http from 'http';
import { Server } from 'socket.io';

import { dbService } from './database.service';
import { authenticateToken } from './auth.middleware';
import { checkRole } from './role.middleware';
import { verifyToken } from './auth.utils';

import authRoutes from './routes/auth.routes';
import scheduleRoutes from './routes/schedule.routes';
import bellRoutes from './routes/bell.routes';
import calendarRoutes from './routes/calendar.routes';
import adminRoutes from './routes/admin.routes';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 4000;

const corsOptions = {
  origin: "http://localhost:5173",
  methods: ["GET", "POST", "PUT", "DELETE"]
};
app.use(cors(corsOptions));
app.use(express.json());

const httpServer = http.createServer(app);

const io = new Server(httpServer, {
  cors: corsOptions
});

// <<< --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ2: –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ --- >>>
const alertStates: Record<string, boolean> = {};

io.use((socket, next) => {
  const token = socket.handshake.auth.token;
  if (!token) {
    return next(new Error('Authentication error: Token not provided'));
  }
  const payload = verifyToken(token);
  if (!payload) {
    return next(new Error('Authentication error: Invalid token'));
  }
  socket.data.userId = payload.userId;
  socket.data.schoolId = payload.schoolId;
  socket.data.role = payload.role;
  next();
});

io.on('connection', (socket) => {
  const schoolId = socket.data.schoolId;
  console.log(`[Socket.IO] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.data.userId} –∏–∑ —à–∫–æ–ª—ã ${schoolId} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.`);

  socket.join(schoolId);
  console.log(`[Socket.IO] üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.data.userId} –ø–æ–º–µ—â–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç—É ${schoolId}`);
  
  // –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É, –µ—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞
  if (alertStates[schoolId]) {
    socket.emit('play-alert', { alertType: 'fire' });
    console.log(`[Socket.IO] ‚ÑπÔ∏è –°–æ–æ–±—â–∏–ª–∏ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É ${socket.data.userId}, —á—Ç–æ —Ç—Ä–µ–≤–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞.`);
  }

  socket.on('emergency-alert', (data) => {
    alertStates[schoolId] = true; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    io.to(schoolId).emit('play-alert', { alertType: data.alertType || 'fire' });
    console.log(`[Socket.IO] üî• –¢—Ä–µ–≤–æ–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —à–∫–æ–ª—ã ${schoolId}`);
  });

  socket.on('force-stop-all', () => {
    alertStates[schoolId] = false; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    io.to(schoolId).emit('stop-alert');
    console.log(`[Socket.IO] üõë –¢—Ä–µ–≤–æ–≥–∞ –¥–ª—è —à–∫–æ–ª—ã ${schoolId} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.`);
  });

  socket.on('disconnect', () => {
    console.log(`[Socket.IO] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.data.userId} –æ—Ç–∫–ª—é—á–∏–ª—Å—è.`);
  });
});

app.use('/api/auth', authRoutes);
app.use('/api/schedules', authenticateToken, scheduleRoutes);
app.use('/api/bells', authenticateToken, bellRoutes);
app.use('/api/calendar', authenticateToken, calendarRoutes);
app.use('/api/admin', authenticateToken, checkRole(['superadmin']), adminRoutes);

const DAYS_OF_WEEK_JS_ORDER = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
const checkBells = async () => {
  const now = new Date();
  const currentTime = now.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });
  const currentDay = DAYS_OF_WEEK_JS_ORDER[now.getDay()];
  const currentDateYYYYMMDD = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}`;
  
  try {
    const allSchools = await dbService.getAllSchools();
    for (const school of allSchools) {
      const todaysScheduleId = await dbService.getScheduleIdForToday(school.id, currentDateYYYYMMDD);
      if (todaysScheduleId) {
        const bellsToRing = await dbService.getRingingBellsForSchedule(todaysScheduleId, currentTime, currentDay);
        for (const bell of bellsToRing) {
          console.log(`[CRON] üîî –ó–≤–æ–Ω–æ–∫ –¥–ª—è "${school.name}": ${bell.name}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ...`);
          io.to(school.id).emit('ring-the-bell', { 
            bellName: bell.name,
            bellTime: bell.time,
          });
        }
      }
    }
  } catch (error) {
    console.error('[Scheduler CRITICAL] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–≤–æ–Ω–∫–æ–≤:', error);
  }
};
cron.schedule('* * * * *', () => { checkBells().catch(console.error); });
console.log('‚è∞ –ú—É–ª—å—Ç–∏-—à–∫–æ–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω.');

httpServer.listen(PORT, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
  console.log(`[Socket.IO] üì° WebSocket —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ —Ç–æ–º –∂–µ –ø–æ—Ä—Ç—É.`);
});