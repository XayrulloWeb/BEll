// –§–∞–π–ª: src/index.ts (–ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê)
import express, { Request, Response } from 'express';
import cors from 'cors';
import cron from 'node-cron';
import dotenv from 'dotenv';
import { dbService } from './database.service';
import { authenticateToken } from './auth.middleware';
import authRoutes from './routes/auth.routes';
import scheduleRoutes from './routes/schedule.routes';
import bellRoutes from './routes/bell.routes';
import calendarRoutes from './routes/calendar.routes';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 4000;

app.use(cors());
app.use(express.json());
dbService.initialize();

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/api/auth', authRoutes); // –û—Ç–∫—Ä—ã—Ç—ã–µ
app.use('/api/schedules', authenticateToken, scheduleRoutes);
app.use('/api/bells', authenticateToken, bellRoutes);
app.use('/api/calendar', authenticateToken, calendarRoutes);

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è /api/data, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–Ω–æ—Å–∏—Ç—Å—è –∏–∑ schedule.routes
app.get('/api/data', authenticateToken, (req: Request, res: Response) => {
    try {
        const schoolId = (req as any).user!.schoolId;
        const data = dbService.getDataForSchool(schoolId);
        if (!data) return res.status(404).json({ message: '–®–∫–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        res.status(200).json(data);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});


// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
const DAYS_OF_WEEK_JS_ORDER = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
const checkBells = () => {
    const now = new Date();
    const currentTime = now.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });
    const currentDay = DAYS_OF_WEEK_JS_ORDER[now.getDay()];
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const currentDateYYYYMMDD = `${year}-${month}-${day}`;

    try {
        const allSchools = dbService.getAllSchools();
        for (const school of allSchools) {
            const todaysScheduleId = dbService.getScheduleIdForToday(school.id, currentDateYYYYMMDD);
            if (todaysScheduleId) {
                const bellsToRing = dbService.getRingingBellsForSchedule(todaysScheduleId, currentTime, currentDay);
                if (bellsToRing.length > 0) {
                    console.log(`üîî –ó–í–û–ù–û–ö –¥–ª—è "${school.name}": ${bellsToRing.map(b => b.name).join(', ')}`);
                }
            }
        }
    } catch (error) {
        console.error('[Scheduler CRITICAL] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–≤–æ–Ω–∫–æ–≤:', error);
    }
};

cron.schedule('* * * * *', checkBells);
console.log('‚è∞ –ú—É–ª—å—Ç–∏-—à–∫–æ–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω.');

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});